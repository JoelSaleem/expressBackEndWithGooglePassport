// this file has be required in at the top of index.js
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');

// Mongoose.model(2 args) => we are trying to load something into into it
// Mongoose.model(1 arg) => we are trying to fetch something out of it
// User here, is our model class
const User = mongoose.model('users');

passport.serializeUser((user, done) => {
	// note: user here was generated by passport User.findOne, which comes from mongo
	// this is NOT googleId, it's the mongo id
	done(null, user.id);
});

passport.deserializeUser((id, done) => {
	User.findById(id).then(user => {
		done(null, user);
	});
});

// tell passport, use GoogleStrategy to authenticate
passport.use(
	new GoogleStrategy(
		{
			clientID: keys.googleClientID,
			clientSecret: keys.googleClientSecret,
			callbackURL: '/auth/google/callback',
			proxy: true // handles something to do with switching https -> http in heroku
		},
		(accessToken, refreshToken, profile, done) => {
			// Note: we need a promise because this is asynchronous
			// we need promises any time we reach out to our database
			User.findOne({ googleId: profile.id }).then(existingUser => {
				if (existingUser) {
					/*
					 We already have a user with this id

					 in done function, we are telling passport that we've done all our db
					 stuff, continue with authentication completion
					 the first arg is an error message, we do not have one otherwise
					 the sendon arg is the user that we have created, null in if, new user in else
					*/
					done(null, existingUser);
				} else {
					// Use model class to create a model instance
					new User({ googleId: profile.id }).save().then(user => {
						done(null, user);
					});
				}
			});
		}
	)
);
